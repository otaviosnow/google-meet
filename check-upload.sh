#!/bin/bash

echo "üîç Verificando arquivos para upload no GitHub..."
echo "================================================"

echo ""
echo "‚úÖ ARQUIVOS QUE DEVEM SER ENVIADOS:"

# Verificar arquivos principais
if [ -f "server-render.js" ]; then
    echo "‚úÖ server-render.js (IMPORTANTE)"
else
    echo "‚ùå server-render.js - FALTANDO (CR√çTICO)"
fi

if [ -f "package.json" ]; then
    echo "‚úÖ package.json"
    # Verificar se est√° atualizado
    if grep -q "server-render.js" package.json; then
        echo "‚úÖ package.json est√° atualizado"
    else
        echo "‚ö†Ô∏è  package.json precisa ser atualizado"
    fi
else
    echo "‚ùå package.json - FALTANDO"
fi

if [ -f "render.yaml" ]; then
    echo "‚úÖ render.yaml"
else
    echo "‚ùå render.yaml - FALTANDO"
fi

if [ -f ".env.example" ]; then
    echo "‚úÖ .env.example"
else
    echo "‚ùå .env.example - FALTANDO"
fi

if [ -f ".gitignore" ]; then
    echo "‚úÖ .gitignore"
else
    echo "‚ùå .gitignore - FALTANDO"
fi

# Verificar pastas
echo ""
echo "üìÅ PASTAS QUE DEVEM SER ENVIADAS:"

if [ -d "public" ]; then
    echo "‚úÖ public/"
else
    echo "‚ùå public/ - FALTANDO"
fi

if [ -d "models" ]; then
    echo "‚úÖ models/"
else
    echo "‚ùå models/ - FALTANDO"
fi

if [ -d "routes" ]; then
    echo "‚úÖ routes/"
else
    echo "‚ùå routes/ - FALTANDO"
fi

if [ -d "middleware" ]; then
    echo "‚úÖ middleware/"
else
    echo "‚ùå middleware/ - FALTANDO"
fi

echo ""
echo "‚ùå ARQUIVOS QUE N√ÉO DEVEM SER ENVIADOS:"

# Verificar arquivos que N√ÉO devem ser enviados
if [ -f ".env" ]; then
    echo "üö® .env ENCONTRADO - N√ÉO ENVIAR (cont√©m senhas)"
else
    echo "‚úÖ .env n√£o encontrado (correto)"
fi

if [ -d "node_modules" ]; then
    echo "‚ö†Ô∏è  node_modules/ ENCONTRADO - N√ÉO ENVIAR"
else
    echo "‚úÖ node_modules/ n√£o encontrado (correto)"
fi

if [ -d "uploads" ]; then
    echo "‚ö†Ô∏è  uploads/ ENCONTRADO - N√ÉO ENVIAR"
else
    echo "‚úÖ uploads/ n√£o encontrado (correto)"
fi

if [ -f "server.js" ]; then
    echo "‚ö†Ô∏è  server.js ENCONTRADO - N√ÉO ENVIAR (antigo)"
else
    echo "‚úÖ server.js n√£o encontrado (correto)"
fi

if [ -f "server-demo.js" ]; then
    echo "‚ö†Ô∏è  server-demo.js ENCONTRADO - N√ÉO ENVIAR"
else
    echo "‚úÖ server-demo.js n√£o encontrado (correto)"
fi

echo ""
echo "üìã RESUMO:"
echo "=========="

# Contar arquivos importantes
IMPORTANT_FILES=("server-render.js" "package.json" "render.yaml" ".env.example" ".gitignore")
MISSING_FILES=0

for file in "${IMPORTANT_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå $file - FALTANDO"
        MISSING_FILES=$((MISSING_FILES + 1))
    fi
done

if [ $MISSING_FILES -eq 0 ]; then
    echo "‚úÖ Todos os arquivos importantes est√£o presentes"
    echo "üöÄ Pronto para upload no GitHub!"
else
    echo "‚ùå $MISSING_FILES arquivo(s) importante(s) faltando"
    echo "‚ö†Ô∏è  Corrija antes de fazer upload"
fi

echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "1. Fazer upload apenas dos arquivos ‚úÖ"
echo "2. N√ÉO enviar arquivos ‚ùå"
echo "3. Deploy no Render"
echo "4. Configurar vari√°veis de ambiente" 